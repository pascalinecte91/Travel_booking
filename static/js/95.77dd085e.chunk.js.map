{"version":3,"file":"static/js/95.77dd085e.chunk.js","mappings":"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","sources":["components/form/ContactForm.js","components/map/contactMap.js","pages/form/ContactFormPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from \"yup\";\r\n\r\n/**\r\n * Schéma de validation pour le formulaire de contact utilisant Yup.\r\n * Définit les règles de validation pour chaque champ du formulaire.\r\n */\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required('Nom requis'),\r\n  email: Yup.string().email('Email invalide').required('Email requis'),\r\n  message: Yup.string().required('Message requis'),\r\n  isRegistered: Yup.boolean(),\r\n});\r\n\r\n/**\r\n * Gère la soumission du formulaire.\r\n * Affiche une alerte et réinitialise le formulaire après la soumission.\r\n * @param {object} values - Les valeurs du formulaire.\r\n * @param {object} actions - Les actions de Formik.\r\n */\r\nconst handleSubmit = (values, { setSubmitting, resetForm }) => {\r\n  console.log(values);\r\n  resetForm();   // Réinitialise le formulaire immédiatement\r\n  \r\n  window.setTimeout(() => { // setTimeout pour déclencher l'alerte après un court délai\r\n    alert(\"Votre message a été transmis !  Nous vous répondrons au plus vite !\");\r\n  }, 100); // Délai de 100 millisecondes\r\n  setSubmitting(false);\r\n};\r\n\r\n/**\r\n * Composant ContactForm pour le formulaire de contact.\r\n * Utilise Formik pour la gestion du formulaire et Yup pour la validation.\r\n * @returns {React.Component} Le composant ContactForm.\r\n */\r\nconst ContactForm = () => {\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: \"\", email: \"\", message: \"\", isRegistered: false }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form className='formContact'>\r\n          <label htmlFor=\"name\">Nom :</label>\r\n          <Field type=\"text\" id=\"name\" name=\"name\" />\r\n          <ErrorMessage name=\"name\" component=\"div\" />\r\n\r\n          <label htmlFor=\"email\">Email :</label>\r\n          <Field type=\"email\" id=\"email\" name=\"email\" />\r\n          <ErrorMessage name=\"email\" component=\"div\" />\r\n\r\n          <label htmlFor=\"message\">Message :</label>\r\n          <Field as=\"textarea\" id=\"message\" name=\"message\" />\r\n          <ErrorMessage name=\"message\" component=\"div\" />\r\n\r\n          <label>\r\n            <Field type=\"checkbox\" name=\"isRegistered\" />\r\n            Déjà inscrit\r\n          </label>\r\n\r\n          <button type=\"submit\" disabled={isSubmitting}>\r\n            Envoyer\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import React, { useEffect } from 'react';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst ContactMap = () => {\r\n    useEffect(() => {\r\n        // Coordonnées de Paris\r\n        const parisCoordinates = [48.8566, 2.3522];\r\n    \r\n        // Coordonnées de succursales fictives de l'agence de travel booking\r\n        const branchOffices = [\r\n          { name: 'Siège social', coordinates: [48.8584, 2.2944], address: '1, Rue de la Tour Eiffel, 75007 Paris' },\r\n          { name: 'Succursale Nord', coordinates: [49.0097, 2.5479], address: '123, Avenue du Nord, 95100 Val d\\'Oise' },\r\n          { name: 'Succursale Sud', coordinates: [48.6325, 2.3948], address: '456, Rue du Sud, 91000 Essonne' },\r\n          { name: 'Succursale Ouest', coordinates: [48.8966, 2.1804], address: '789, Boulevard de l\\'Ouest, 92000 Hauts-de-Seine' },\r\n          // Ajoute autant de succursales que nécessaire\r\n        ];\r\n    \r\n        // Crée une carte Leaflet et l'ajoute à l'élément avec l'id \"map\"\r\n        const map = L.map('map').setView(parisCoordinates, 10);\r\n    \r\n        // Ajoute une couche de tuiles OpenStreetMap à la carte\r\n        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png').addTo(map);\r\n\r\n    \r\n        // Ajoute des marqueurs pour chaque succursale avec le nom et l'adresse dans le popup\r\n        branchOffices.forEach((branch) => {\r\n          L.marker(branch.coordinates)\r\n            .addTo(map)\r\n            .bindPopup(`<b>${branch.name}</b><br>${branch.address}`)\r\n            .openPopup();\r\n        });\r\n    \r\n        // Retourne une fonction de nettoyage qui détruira la carte\r\n        return () => {\r\n          map.remove();\r\n        };\r\n      }, []);\r\n    \r\n\r\n  return <section className='mapAdress' id='map'></section>;\r\n};\r\n\r\nexport default ContactMap;\r\n","import React from 'react'\r\nimport ContactForm from 'components/form/ContactForm.js'\r\nimport ContactMap from 'components/map/contactMap.js'\r\n\r\n\r\nconst ContactFormPage = () => {\r\n  return (\r\n    <>\r\n       <h1 className='contact--title'>Nous contacter ! choisissez sur la map</h1>\r\n    <section className='contact'>\r\n   \r\n\r\n    <ContactForm />\r\n <ContactMap />\r\n   \r\n\r\n    </section>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ContactFormPage"],"names":["validationSchema","Yup","name","required","email","message","isRegistered","handleSubmit","values","_ref","setSubmitting","resetForm","console","log","window","setTimeout","alert","_jsx","Formik","initialValues","onSubmit","children","_ref2","isSubmitting","_jsxs","Form","className","htmlFor","Field","type","id","ErrorMessage","component","as","disabled","useEffect","map","L","setView","addTo","coordinates","address","forEach","branch","bindPopup","concat","openPopup","remove","_Fragment","ContactForm","ContactMap"],"sourceRoot":""}